using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class WebCamControllergray : MonoBehaviour {

	int width = 1600;
	int height = 800;
	int fps = 120;
	Texture2D texture;
	WebCamTexture webcamTexture;
	Color32[] colors = null;
    public byte red = 1;
    public int redx = 1;
    public int redy = 1;
    public int camwidth;
    public int camheight;
    
   // private List<int> remember_redx = new List<int>();
    //private List<int> remember_redy = new List<int>();

    IEnumerator Init()
	{
		while (true)
		{
			if (webcamTexture.width > 16 && webcamTexture.height > 16)
			{
				colors = new Color32[webcamTexture.width * webcamTexture.height];
				texture = new Texture2D (webcamTexture.width, webcamTexture.height, TextureFormat.RGBA32, false);
				GetComponent<Renderer> ().material.mainTexture = texture;
				break;
			}
			yield return null;
		}
	}

	// Use this for initialization
	void Start () {
		WebCamDevice[] devices = WebCamTexture.devices;
		webcamTexture = new WebCamTexture(devices[0].name, this.width, this.height, this.fps);
		webcamTexture.Play();
        Debug.Log("開始");
		StartCoroutine (Init ());
        camwidth = webcamTexture.width;
        camheight = webcamTexture.height;

	}

	// Update is called once per frame
	void Update () {
       // int finish_color = 0;
      //  Color32 c1;
     //   byte red_tmp1;


        if (colors != null)
		{
			webcamTexture.GetPixels32 (colors);

			int width = webcamTexture.width;
			int height = webcamTexture.height;

            float H, S, V;
			Color32 rc = new Color32();
            Color32 reverse_c = new Color32();
            

            //Debug.Log(colors[height / 2 * width / 2]);

            for (int x = 0; x < width; x++)
			{
              //  if (finish_color == 1)
              //  {
              //      break;
              //  }

				for (int y = 0; y < height; y++)
				{

                    
					Color32 c = colors [x + y * width];
                    

                    byte red_tmp = (byte)(c.r);

                    byte blue_tmp = (byte)(c.b);

                    byte green_tmp = (byte)(c.g);

                    UnityEngine.Color.RGBToHSV(c,out H, out S, out V);

                    if ((H == 0 || H == 1 || H == 0.01) && S > 0.8 && V > 0.4)
                    {
                        red = red_tmp;
                        redx = width - x;
                        redy = y;
                     //   finish_color = 1;
                       // remember_redx.Add(x);
                       // remember_redy.Add(y);


                        break;
                        // Debug.Log("red" + red);
                        //Debug.Log("x" + x);
                        //Debug.Log("y" + y);
                    }
                    
                    //Color.RGBToHSV (c, out H, out S, out V);
                    // byte gray = (byte)(0.1f * c.r + 0.7f * c.g + 0.2f * c.b);
                   
                    // rc.r = rc.g = rc.b = gray;
                    // colors [x + y * width] = rc;

                    
                    

                    
                    
				}
			}

        //    for(int i = 0; i < remember_redx.Count; i++)
           // {
           //     int con_x = remember_redx[i];
           //     int con_y = remember_redy[i];
           //     rc.r = 255;
           //     rc.g = rc.b = 255;
           //     colors[con_x + con_y * width] = rc;
           // }
			texture.SetPixels32 (colors);
			texture.Apply ();
		}
	}

}
